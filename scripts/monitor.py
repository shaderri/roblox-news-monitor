import os
import requests
import json
import random
import string
from datetime import datetime, timezone

class RobloxNewsMonitor:
    def __init__(self):
        self.api_key = os.getenv('COMPOSIO_API_KEY')
        self.target_email = os.getenv('TARGET_EMAIL', 'linkrobloxnews@gmail.com')
        self.session_id = None
        self.base_url = "https://backend.composio.dev/api/v1"
        
    def generate_session_id(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç session_id –≤ —Ñ–æ—Ä–º–∞—Ç–µ TTT-RRRRR"""
        part1 = ''.join(random.choices(string.ascii_uppercase + string.digits, k=3))
        part2 = ''.join(random.choices(string.ascii_uppercase + string.digits, k=5))
        return f"{part1}-{part2}"
    
    def search_tools(self):
        """–ü–æ–∏—Å–∫ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        url = f"{self.base_url}/tools/search"
        headers = {
            "X-API-Key": self.api_key,
            "Content-Type": "application/json"
        }
        
        payload = {
            "use_case": "Search for fresh Roblox news from last 4 hours and send email digest",
            "known_fields": f"recipient_email:{self.target_email}, period:last 4 hours",
            "session": {"generate_id": True},
            "exploratory_query": False
        }
        
        try:
            response = requests.post(url, headers=headers, json=payload, timeout=30)
            if response.status_code == 200:
                result = response.json()
                self.session_id = result.get('data', {}).get('session', {}).get('id')
                print(f"üîç Tools initialized. Session: {self.session_id}")
                return True
            else:
                print(f"‚ùå Tools search failed: {response.status_code}")
                return False
        except Exception as e:
            print(f"‚ùå Error in tools search: {e}")
            return False
    
    def search_fresh_news(self):
        """–ü–æ–∏—Å–∫ —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —á–∞—Å–∞"""
        url = f"{self.base_url}/tools/execute"
        headers = {
            "X-API-Key": self.api_key,
            "Content-Type": "application/json"
        }
        
        current_time = datetime.now(timezone.utc)
        cutoff_time = current_time.replace(hour=current_time.hour-4)
        
        tools = [
            {
                "tool_slug": "COMPOSIO_SEARCH_NEWS_SEARCH",
                "arguments": {"query": "Roblox"}
            },
            {
                "tool_slug": "COMPOSIO_SEARCH_TAVILY_SEARCH", 
                "arguments": {
                    "query": "Roblox news updates events security legal last 4 hours",
                    "search_depth": "advanced",
                    "max_results": 10
                }
            }
        ]
        
        payload = {
            "tools": tools,
            "sync_response_to_workbench": False,
            "session_id": self.session_id,
            "memory": {},
            "thought": "Searching for fresh Roblox news from last 4 hours"
        }
        
        try:
            response = requests.post(url, headers=headers, json=payload, timeout=60)
            if response.status_code == 200:
                print("üì∞ News search completed")
                return response.json()
            else:
                print(f"‚ùå News search failed: {response.status_code}")
                return None
        except Exception as e:
            print(f"‚ùå Error in news search: {e}")
            return None
    
    def filter_timestamped_articles(self, search_response):
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç–µ–π —Å —Ç–æ—á–Ω—ã–º–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏"""
        articles = []
        
        if not search_response or 'data' not in search_response:
            return articles
            
        try:
            results = search_response.get('data', {}).get('data', {}).get('results', [])
            
            for result in results:
                response_data = result.get('response', {}).get('data', {})
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ Google News
                if 'results' in response_data and 'news_results' in response_data['results']:
                    news_results = response_data['results']['news_results']
                    for article in news_results:
                        date_str = article.get('date', '')
                        if self.is_recent_timestamp(date_str):
                            articles.append({
                                'title': article.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞'),
                                'url': article.get('link', '#'),
                                'source': article.get('source', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫'),
                                'date': date_str,
                                'snippet': article.get('snippet', '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ'),
                                'category': 'news'
                            })
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ Tavily
                elif 'response_data' in response_data and 'results' in response_data['response_data']:
                    tavily_results = response_data['response_data']['results']
                    for article in tavily_results:
                        content = article.get('content', '')
                        title = article.get('title', '')
                        if 'roblox' in (content + title).lower():
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–≤–µ–∂–µ—Å—Ç—å –ø–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é
                            if any(term in content.lower() for term in ['hours ago', 'today', 'breaking', 'just', 'new']):
                                articles.append({
                                    'title': title or '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞',
                                    'url': article.get('url', '#'),
                                    'source': self.extract_domain(article.get('url', '')),
                                    'date': '–ù–µ–¥–∞–≤–Ω–æ',
                                    'snippet': content[:200] + '...' if len(content) > 200 else content,
                                    'category': 'web'
                                })
                                
        except Exception as e:
            print(f"‚ö†Ô∏è Error processing articles: {e}")
        
        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ URL
        unique_articles = {}
        for article in articles:
            url = article['url']
            if url not in unique_articles and url != '#':
                unique_articles[url] = article
        
        return list(unique_articles.values())
    
    def is_recent_timestamp(self, date_str):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–µ–∂–µ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–∏"""
        if not date_str:
            return False
            
        date_lower = date_str.lower()
        recent_indicators = ['hours ago', 'hour ago', 'minutes ago', 'minute ago']
        
        for indicator in recent_indicators:
            if indicator in date_lower:
                if 'hours ago' in date_lower or 'hour ago' in date_lower:
                    try:
                        hours = int(date_str.split()[0]) if date_str.split()[0].isdigit() else 1
                        return hours <= 4
                    except:
                        return True
                return True  # minutes ago —Å—á–∏—Ç–∞–µ–º —Å–≤–µ–∂–∏–º
        
        return False
    
    def extract_domain(self, url):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–æ–º–µ–Ω–∞ –∏–∑ URL"""
        try:
            if url and '://' in url:
                return url.split('/')[2]
            return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫'
        except:
            return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫'
    
    def create_html_digest(self, articles):
        """–°–æ–∑–¥–∞–Ω–∏–µ HTML –¥–∞–π–¥–∂–µ—Å—Ç–∞"""
        current_time = datetime.now(timezone.utc).strftime('%Y-%m-%d %H:%M:%S UTC')
        
        html = f'''<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <title>Roblox News Digest</title>
    <style>
        body {{ font-family: Arial, sans-serif; max-width: 800px; margin: 20px auto; padding: 20px; }}
        .header {{ background-color: #f5f5f5; padding: 15px; margin-bottom: 20px; border-radius: 5px; }}
        .news-item {{ margin-bottom: 15px; padding: 10px; border-left: 3px solid #007acc; background-color: #fafafa; border-radius: 3px; }}
        .high {{ border-left-color: #dc3545; }}
        .title {{ font-weight: bold; font-size: 16px; margin-bottom: 5px; }}
        .title a {{ color: #007acc; text-decoration: none; }}
        .title a:hover {{ text-decoration: underline; }}
        .meta {{ color: #666; font-size: 12px; margin-bottom: 8px; }}
        .snippet {{ font-size: 14px; line-height: 1.4; color: #333; }}
        .footer {{ margin-top: 30px; padding-top: 15px; border-top: 1px solid #ddd; color: #666; font-size: 12px; }}
        .no-news {{ background-color: #fff3cd; border-left-color: #ffc107; }}
    </style>
</head>
<body>
    <div class="header">
        <h1>üéÆ Roblox News Digest</h1>
        <p><strong>–í—Ä–µ–º—è –ø–æ–∏—Å–∫–∞:</strong> {current_time}</p>
        <p><strong>–ü–µ—Ä–∏–æ–¥:</strong> –ü–æ—Å–ª–µ–¥–Ω–∏–µ 4 —á–∞—Å–∞</p>
        <p><strong>–ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤–æ—Å—Ç–µ–π —Å —Ç–æ—á–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º:</strong> {len(articles)}</p>
    </div>
'''
        
        if not articles:
            html += '''
    <div class="news-item no-news">
        <p><strong>–°–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –æ Roblox –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —á–∞—Å–∞ —Å —Ç–æ—á–Ω—ã–º–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.</strong></p>
        <p>–°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç –¥–∞–π–¥–∂–µ—Å—Ç –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π.</p>
    </div>
'''
        else:
            for i, article in enumerate(articles, 1):
                html += f'''
    <div class="news-item high">
        <div class="title">
            <a href="{article['url']}" target="_blank">{article['title']}</a>
        </div>
        <div class="meta">
            <strong>‚Ññ{i}</strong> | <strong>–ò—Å—Ç–æ—á–Ω–∏–∫:</strong> {article['source']} | <strong>–í—Ä–µ–º—è:</strong> {article['date']}
        </div>
        <div class="snippet">{article['snippet']}</div>
    </div>
'''
        
        html += '''
    <div class="footer">
        <p><strong>ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤–æ—Å—Ç–µ–π Roblox</strong></p>
        <p>üìß –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 4 —á–∞—Å–∞</p>
        <p>üîç –ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–∏—Å—Ç–æ—á–Ω–∏–∫–∞–º (English + –†—É—Å—Å–∫–∏–π)</p>
        <p>‚öôÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è: GitHub Actions</p>
        <p><em>–ü–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–æ–≤–æ—Å—Ç–∏ —Å —Ç–æ—á–Ω—ã–º–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏</em></p>
    </div>
</body>
</html>'''
        
        return html
    
    def send_email_digest(self, html_content, articles_count):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ email –¥–∞–π–¥–∂–µ—Å—Ç–∞"""
        url = f"{self.base_url}/tools/execute"
        headers = {
            "X-API-Key": self.api_key,
            "Content-Type": "application/json"
        }
        
        if articles_count == 0:
            subject = "Roblox News Digest - –°–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        elif articles_count == 1:
            subject = "Roblox News Digest - 1 —Å–≤–µ–∂–∞—è –Ω–æ–≤–æ—Å—Ç—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —á–∞—Å–∞"
        else:
            subject = f"Roblox News Digest - {articles_count} –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —á–∞—Å–∞"
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∞
        draft_tools = [{
            "tool_slug": "GMAIL_CREATE_EMAIL_DRAFT",
            "arguments": {
                "recipient_email": self.target_email,
                "subject": subject,
                "body": html_content,
                "is_html": True
            }
        }]
        
        payload = {
            "tools": draft_tools,
            "sync_response_to_workbench": False,
            "session_id": self.session_id,
            "memory": {},
            "thought": "Creating email draft with Roblox news digest"
        }
        
        try:
            response = requests.post(url, headers=headers, json=payload, timeout=30)
            
            if response.status_code == 200:
                result = response.json()
                draft_id = self.extract_draft_id(result)
                
                if draft_id:
                    print(f"üìù Draft created: {draft_id}")
                    return self.send_draft(draft_id)
                else:
                    print("‚ùå Failed to extract draft ID")
                    return False
            else:
                print(f"‚ùå Failed to create draft: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå Error creating email: {e}")
            return False
    
    def extract_draft_id(self, response):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ ID —á–µ—Ä–Ω–æ–≤–∏–∫–∞ –∏–∑ –æ—Ç–≤–µ—Ç–∞"""
        try:
            results = response.get('data', {}).get('data', {}).get('results', [])
            for result in results:
                response_data = result.get('response', {}).get('data', {}).get('response_data', {})
                if 'id' in response_data:
                    return response_data['id']
        except Exception as e:
            print(f"‚ö†Ô∏è Error extracting draft ID: {e}")
        return None
    
    def send_draft(self, draft_id):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–Ω–æ–≤–∏–∫–∞"""
        url = f"{self.base_url}/tools/execute"
        headers = {
            "X-API-Key": self.api_key,
            "Content-Type": "application/json"
        }
        
        send_tools = [{
            "tool_slug": "GMAIL_SEND_DRAFT",
            "arguments": {"draft_id": draft_id}
        }]
        
        payload = {
            "tools": send_tools,
            "sync_response_to_workbench": False,
            "session_id": self.session_id,
            "memory": {},
            "thought": "Sending email digest draft"
        }
        
        try:
            response = requests.post(url, headers=headers, json=payload, timeout=30)
            if response.status_code == 200:
                print("üìß Email sent successfully!")
                return True
            else:
                print(f"‚ùå Failed to send email: {response.status_code}")
                return False
        except Exception as e:
            print(f"‚ùå Error sending email: {e}")
            return False
    
    def run(self):
        """–ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        print(f"üöÄ Roblox News Monitor started at {datetime.now(timezone.utc)}")
        print(f"üìß Target email: {self.target_email}")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á
            if not self.api_key:
                print("‚ùå COMPOSIO_API_KEY not found in environment variables")
                return False
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º session_id
            self.session_id = self.generate_session_id()
            print(f"üìã Session ID: {self.session_id}")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
            if not self.search_tools():
                print("‚ùå Failed to initialize tools")
                return False
            
            # –ü–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π
            search_result = self.search_fresh_news()
            if not search_result:
                print("‚ùå Failed to search news")
                return False
            
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç–µ–π
            articles = self.filter_timestamped_articles(search_result)
            print(f"üì∞ Found {len(articles)} timestamped articles")
            
            # –ü–µ—á–∞—Ç–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            if articles:
                print("üìã Found articles:")
                for i, article in enumerate(articles, 1):
                    print(f"  {i}. {article['title'][:60]}... - {article['date']}")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ HTML –¥–∞–π–¥–∂–µ—Å—Ç–∞
            html_digest = self.create_html_digest(articles)
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ email
            success = self.send_email_digest(html_digest, len(articles))
            
            if success:
                print("‚úÖ Email digest sent successfully!")
                print(f"üìä Summary: {len(articles)} articles processed")
            else:
                print("‚ùå Failed to send email digest")
            
            return success
            
        except Exception as e:
            print(f"‚ùå Unexpected error: {e}")
            import traceback
            traceback.print_exc()
            return False

if __name__ == "__main__":
    monitor = RobloxNewsMonitor()
    success = monitor.run()
    exit(0 if success else 1)
